name: CFSSL
label: PKI
description: CloudFlare's Public Key Infrastructure
version: 0.1.0

compatibility:
  cdhVersion:
    max: '5'
    min: 5.7.0

icon: images/icon.png

inExpressWizard: true

runAs:
  user: cfssl
  group: cfssl
  principal: cfssl

maxInstances: 1

parcel:
  repoUrl: https://github.com/nomr/cfssl-parcel/releases/download/v1.2.0+0.0.1
  requiredTags: [pki]

serviceDependencies:

rolesWithExternalLinks:
- CFSSL_ROOT_CA

commands:
- name: svc_create_ca
  label: Initialize Root CA
  description: Creates the root certificate and keys
  roleCommand: root_ca_init
  roleName: CFSSL_ROOT_CA
  runMode: single

parameters:
- name: csr_name_org
  configName: CA_O
  label: CA's X.509 Organization
  description: The X.509 attributes for the certificate, i.e.
    country(C), state or province(S), locality(L), organization(O),
    organizational unit(OU), and the common name(CN). All fields are
    optional, but if a CN is not defined, then CFSSL will default to
    the machine's hostname.
  type: string
- name: csr_name_location
  configName: CA_L
  label: CA's X.509 Location
  description: The X.509 attributes for the certificate, i.e.
    country(C), state or province(S), locality(L), organization(O),
    organizational unit(OU), and the common name(CN). All fields are
    optional, but if a CN is not defined, then CFSSL will default to
    the machine's hostname.
  type: string
- name: csr_name_state
  configName: CA_ST
  label: CA's X.509 State or Province
  description: The X.509 attributes for the certificate, i.e.
    country(C), state or province(S), locality(L), organization(O),
    organizational unit(OU), and the common name(CN). All fields are
    optional, but if a CN is not defined, then CFSSL will default to
    the machine's hostname.
  type: string
- name: csr_name_country
  configName: CA_C
  label: CA's X.509 Country
  description: The X.509 attributes for the certificate, i.e.
    country(C), state or province(S), locality(L), organization(O),
    organizational unit(OU), and the common name(CN). All fields are
    optional, but if a CN is not defined, then CFSSL will default to
    the machine's hostname.
  type: string

- name: sign_default_expiry
  configName: SIGNING_DEFAULT_EXPIRY
  label: Default Signing Policy Expiry
  description: How long the signed certificates are valid.
  type: long
  min: 1
  softMin: 128
  unit: hours
  default: 8760

- name: sign_default_usages
  configName: SIGNING_DEFAULT_USAGES
  label: Default Signing Policy Usages
  description: 'The usages allowed in the default policy. The following are
    acceptable key usages: signing, digital signature, content committment,
    key encipherment, key agreement, data encipherment, cert sign, crl sign,
    encipher only, decipher only. The following are acceptable extended
    key usages: any, server auth, client auth, code signing,
    email protection, s/mime, ipsec end system, ipsec tunnel, ipsec user,
    timestamping, ocsp signing, microsoft sgc, netscape sgc.'
  type: string_array
  separator: '","'
  default:
  - signing
  - key encipherment
  - server auth
  - client auth

roles:
- name: CFSSL_ROOT_CA
  label: Root CA
  pluralLabel: Root Certificate of Authority

  externalLink:
    name: webserver_web_ui
    label: CA Server
    url: 'https://${host}:${tls_port}'

  startRunner:
    environmentVariables:
      CFSSL_AUTH_DEFAULT_KEY_BASE64: "${auth_default_key}"
    program: scripts/control.sh
    args: [root-ca-run]

  commands:
  - name: root_ca_init
    label: Initialize Root CA
    description: Creates the root certificate and keys
    expectedExitCodes: [0]
    requiredRoleState: stopped
    commandRunner:
      environmentVariables:
        CFSSL_CSR_CN: "${host}"
      program: scripts/control.sh
      args:
      - root-ca-init

  topology:
    maxInstances: 1
    minInstances: 1

  logging:
    dir: /var/log/cfssl
    filename: ca-server.log
    loggingType: log4j
    modifiable: false

  parameters:
  - name: auth_default_key
    configName: CFSSL_AUTH_DEFAULT_KEY_BASE64
    label: CA's Default Authentication Token
    description: The token to prevent MITM attacks.
    required: true
    configurableInWizard: true
    sensitive: true
    type: password
    conformRegex: '^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$'

  - name: csr_hosts
    configName: CSR_SAN
    label: CA's Subject Alternate Name
    description: The Certificate of Authority subject alternative names.
    required: false
    type: uri_array
    separator: '","'
    default:

  - name: csr_name_org_unit
    configName: CSR_OU_0
    label: CA's X.509 Organizational Unit
    description: The X.509 attributes for the certificate, i.e.
      country(C), state or province(S), locality(L), organization(O),
      organizational unit(OU), and the common name(CN). All fields are
      optional, but if a CN is not defined, then CFSSL will default to
      the machine's hostname.
    type: string_array
    separator: ';'
    minLength: 1
    maxLength: 1
    default:
    - Certificate of Authority

  - name: csr_key_algo
    configName: CSR_KEY_ALGO
    label: CA's Key Algorithm
    description: The encryption algorithm used by the key
    required: true
    type: string_enum
    validValues: [rsa,ecdsa]
    default: rsa
  - name: csr_key_size
    configName: CSR_KEY_SIZE
    label: CA's Key Algorithm
    description: The size of the encryption key. For RSA pick something
      between 2048 and 8192. For ECDSA pick one of 256, 384 or 521.
    required: true
    type: long
    default: 4096

  - name: tls_port
    configName: port
    label: CA Server Port
    description: The port for the Certificate Authority to listen on.
    required: true
    type: port
    min: 1024
    default: 23443

  configWriter:
    generators:
    - filename: root-ca-csr.vars
      configFormat: properties
      includedParams:
      - csr_hosts
      - csr_key_algo
      - csr_key_size
      - csr_name_country
      - csr_name_state
      - csr_name_location
      - csr_name_org
      - csr_name_org_unit

    - filename: root-ca-config.vars
      configFormat: properties
      includedParams:
      - sign_default_expiry
      - sign_default_usages


#gateway:
#  alternatives:
#    name: tls-conf
#    priority: 50
#    linkRoot: /etc/pki/cfssl
#  scriptRunner:
#    program: scripts/cc.sh
#    args: [deploy]
#  configWriter:
#    auxConfigGenerators:
#    - filename: tls-conf/client.sh
#      sourceFilename: scripts/client.sh
#    generators:
#    - filename: tls-conf/tls-service.hadoop_xml
#      configFormat: hadoop_xml
#      includedParams:
#      - tls_token
#      additionalConfigs:
#      - {key: days, value: '1095'}
#      - {key: keySize, value: '2048'}
#      - {key: keyPairAlgorithm, value: RSA}
#      - {key: signingAlgorithm, value: SHA256WITHRSA}
#      - {key: keyStoreType, value: jks}
#      - {key: caHostname, value: '@@CA_HOSTNAME@@'}
#      - {key: port, value: '@@CA_PORT@@'}
#      - {key: reorderDn, value: true}
#    peerConfigGenerators:
#    - roleName: CFSSL_ROOT_CA
#      filename: tls-conf/tls-service.properties
#      params: [tls_port]
